AWSTemplateFormatVersion: '2010-09-09'
Description: "Network: VPC, Subnets + RouteTables, Internet + NAT Gateways; Frontend: ALB + ASG + APP, Backend: ALB + ASG + APP; Database "

Metadata:
 AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - Environment
          - VPCCidr
      -
        Label:
          default: "Subnets CIDR Blocks"
        Parameters:
          - PublicSubnetA
          - FrontendSubnetA
          - FrontendSubnetB
          - BackendSubnetA
          - BackendSubnetB
          - DatabaseSubnetA

Parameters:
  DomainName:
    Type: String
    Default: example.net
  Environment:
    Description: Name of VPC
    Type: String
    Default: "test-prod"
  BucketName: 
    Type: String, 
    Default: "new-project-bucket-1" 
  KeyName:
    Description: Key Pair for EC2
    Type: 'AWS::EC2::KeyPair::KeyName'
  VpcCidr:
    Default: '10.1.0.0/16'
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  InstanceType:
    Description: Type for application frontend
    Default: 't2.micro'
    Type: String
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  SSHLocationBastion:
    Description: The IP address range that can be used to SSH to the BASTION
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  
  EnvironmentType:
    Description: "Specify the Environment type of the DB"
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  DBInstanceIdentifier:
    Type: String
    Default: "webapp-db"
  DBUsername:
    NoEcho: "true"
    Description: Username for Postgresql database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: "postgres"
  DBPassword:
    NoEcho: "true"
    Description: Password Postgresql database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c
    us-west-2:
      HVM64: ami-a0cfeed8
      HVMG2: ami-0e09505bc235aa82d
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
      HVMG2: ami-0a7c483d527806435
    eu-west-2:
      HVM64: ami-f976839e
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0ebc281c20e89ba4b
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0233214e13e500f77
      HVMG2: ami-06223d46a6d0661c7
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
      HVMG2: ami-053cdd503598e4a9d
    ap-northeast-2:
      HVM64: ami-0a10b2721688ce9d2
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-0d98120a9fb693f07
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
      HVMG2: ami-0be9df32ae9f92309
    ap-southeast-2:
      HVM64: ami-09b42976632b27e9b
      HVMG2: ami-0a9ce9fecc3d1daf8
    ap-south-1:
      HVM64: ami-0912f71e06545ad88
      HVMG2: ami-097b15e89dbdcfcf4
    us-east-2:
      HVM64: ami-0b59bfac6be064b78
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      HVM64: ami-0b18956f
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-07b14488da8ea02a0
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-0a4eaf6c4454eda75
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-6b6a7d09
      HVMG2: NOT_SUPPORTED
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: Name
          Value: !Ref Environment
  #============================= SUBNETS =======================================
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidr, 12, 8 ] ] # 10.1.0.0/24
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags: 
       - Key: "Name"
         Value: "PublicSubnet1"
  FrontendSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcCidr, 12, 8 ] ] # 10.1.1.0/24
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags: 
       - Key: "Name"
         Value: "FrontendSubnet1"
  FrontendSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 2, !Cidr [ !Ref VpcCidr, 12, 8 ] ] # 10.1.2.0/24
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref AWS::Region
      Tags: 
       - Key: "Name"
         Value: "FrontendSubnet2"
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 3, !Cidr [ !Ref VpcCidr, 12, 8 ] ] # 10.1.3.0/24
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags: 
       - Key: "Name"
         Value: "DatabaseSubnet1"
  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 6, !Cidr [ !Ref VpcCidr, 12, 8 ] ] # 10.1.6.0/24
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags: 
       - Key: "Name"
         Value: "DatabaseSubnet2"
  BackendSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 4, !Cidr [ !Ref VpcCidr, 12, 8 ] ] #10.1.4.0/24
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags: 
       - Key: "Name"
         Value: "BackendSubnet1"
  BackendSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 5, !Cidr [ !Ref VpcCidr, 12, 8 ] ] #10.1.5.0/24
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags: 
       - Key: "Name"
         Value: "BackendSubnet2"

  #================================================================================================
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: Vpc
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicSubnet1
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable
   
  MyEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties: {}

  MyNAT:
    Type: AWS::EC2::NatGateway
    DependsOn: PublicSubnet1
    Properties: 
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  RouteToNat:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNAT  

#================== Private Route Table ==============================
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BackendSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BackendSubnet2
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet1
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnetRouteTableAssociation4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FrontendSubnet2
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnetRouteTableAssociation5:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet1
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnetRouteTableAssociation6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet2
      RouteTableId: !Ref PrivateRouteTable

#======================= BASTION =============================================
  BastionInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - PublicSubnet1
      - InternetGateway
      - MyNat
    Properties:
      ImageId: ami-0a261c0e5f51090b1
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - !Ref BastionSecurityGroup
        - !Ref ALBSecurityGroupBack
      Tags:
       - Key: Name
         Value: BastionServer  
      Userdata:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum update
               
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open SSH Bastion server
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocationBastion
        
#======================= Route53 + CDN  =============================================
  DNS_HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
	Comment: !Join
	  - " "
	  - ["My hosted zone for", !Ref DomainName]
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
  MyRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS_HostedZone
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt MyCloudFrontDistribution.DomainNameALB
        HostedZoneId: !Ref DNS_HostedZone
  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          TargetOriginId: ApplicationLoadBalancerFront
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainNameALB: !GetAtt ApplicationLoadBalancerFront.DNSName
            Id: ApplicationLoadBalancerFront
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only

#=================== ASG ALB Frontend Application =================================

  ALBSecurityGroupFront:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc

  ASGroupFront:
   Type: 'AWS::AutoScaling::AutoScalingGroup'
   DependsOn: 
    - FrontendSubnet1
    - FrontendSubnet2
    - FrontLaunchTemplate
    - ALBTargetGroupFront
   Properties:
     AvailabilityZones:
       - !Select [ 1, !GetAZs '' ]
       - !Select [ 2, !GetAZs '' ]
     VPCZoneIdentifier:
       - !Ref FrontendSubnet1
       - !Ref FrontendSubnet2
     DesiredCapacity: 2
     HealthCheckGracePeriod: 300
     HealthCheckType: ELB
     LaunchTemplate:
       LaunchTemplateId: !Ref FrontLaunchTemplate
       Version: !GetAtt FrontLaunchTemplate.LatestVersionNumber
     MaxSize: 5
     MinSize: 2
     TargetGroupARNs:
       - !Ref ALBTargetGroupFront
     Tags:
       - Key: Name
         PropagateAtLaunch: false
         Value: ASG-frontend

  FrontLaunchTemplate:
   Type: AWS::EC2::LaunchTemplate
   Properties:
     LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
     LaunchTemplateData:
      ImageId:
          Fn::FindInMap:
            - AWSRegionArch2AMI
            - Ref: AWS::Region
            - Fn::FindInMap:
                - AWSInstanceType2Arch
                - Ref: InstanceType
                - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Monitoring:
          Enabled: True
      SecurityGroupIds:
        - !Ref ALBSecurityGroupFront
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start
            echo "<html><body><h1>Hello from Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html

  WebServerTargetPolicyFront:
   Type: AWS::AutoScaling::ScalingPolicy
   Properties:
     AutoScalingGroupName: !Ref ASGroupFront
     PolicyType: TargetTrackingScaling
     TargetTrackingConfiguration:
       PredefinedMetricSpecification:
         PredefinedMetricType: ASGAverageCPUUtilization
       TargetValue: 50.0

  ApplicationLoadBalancerFront:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:  
      - ALBTargetGroupFront
      - ASGroupFront
      - WebServerTargetPolicyFront
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroupFront
      Subnets:
       - !Ref FrontendSubnet1
       - !Ref FrontendSubnet2
      Certificates:
        - CertificateArn: !Ref SSLCertificate

  ALBListenerFront:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupFront
      LoadBalancerArn: !Ref ApplicationLoadBalancerFront
      Port: '80'
      Protocol: HTTP

  ALBTargetGroupFront:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref Vpc

#=================== ASG ALB Backend Application =================================

  ALBSecurityGroupBack:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 
            - !Ref FrontendSubnet1
            - !Ref FrontendSubnet2
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            - !Ref FrontendSubnet1
            - !Ref FrontendSubnet2
      VpcId: !Ref Vpc

  ASGroupBack:
   Type: 'AWS::AutoScaling::AutoScalingGroup'
   DependsOn: 
    - BackendSubnet1
    - BackendSubnet2
    - BackLaunchTemplate
    - ALBTargetGroupBack
   Properties:
     AvailabilityZones:
       - !Select [ 0, !GetAZs '' ]
       - !Select [ 1, !GetAZs '' ]
     VPCZoneIdentifier:
       - !Ref BackendSubnet1
       - !Ref BackendSubnet2
     DesiredCapacity: 2
     HealthCheckGracePeriod: 300
     HealthCheckType: ELB
     LaunchTemplate:
       LaunchTemplateId: !Ref BackLaunchTemplate
       Version: !GetAtt BackLaunchTemplate.LatestVersionNumber
     MaxSize: 5
     MinSize: 2
     TargetGroupARNs:
       - !Ref ALBTargetGroupBack
     Tags:
       - Key: Name
         PropagateAtLaunch: false
         Value: ASG-backend

  BackLaunchTemplate:
   Type: AWS::EC2::LaunchTemplate
   Properties:
     LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
     LaunchTemplateData:
      ImageId:
          Fn::FindInMap:
            - AWSRegionArch2AMI
            - Ref: AWS::Region
            - Fn::FindInMap:
                - AWSInstanceType2Arch
                - Ref: InstanceType
                - Arch
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Monitoring:
          Enabled: True
      SecurityGroupIds:
        - !Ref ALBSecurityGroupBack
     
  WebServerTargetPolicyBack:
   Type: AWS::AutoScaling::ScalingPolicy
   Properties:
     AutoScalingGroupName: !Ref ASGroupBack
     PolicyType: TargetTrackingScaling
     TargetTrackingConfiguration:
       PredefinedMetricSpecification:
         PredefinedMetricType: ASGAverageCPUUtilization
       TargetValue: 50.0

  ApplicationLoadBalancerBack:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:  
      - ALBTargetGroupBack
      - ASGroupBack
      - WebServerTargetPolicyBack
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroupBack
      Subnets:
       - !Ref BackendSubnet1
       - !Ref BackendSubnet2
      
  ALBListenerBack:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroupBack
      LoadBalancerArn: !Ref ApplicationLoadBalancerBack
      Port: '80'
      Protocol: HTTP

  ALBTargetGroupBack:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref Vpc

#======================= DATABASE ====================================
  SubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    DependsOn: 
       - !Ref "DatabaseSubnet1"
       - !Ref "DatabaseSubnet2"
    Properties:
      DBSubnetGroupName: "subnetgroup"
      DBSubnetGroupDescription: "Subnet Group"
      SubnetIds:
        - !Ref "DatabaseSubnet1"
        - !Ref "DatabaseSubnet2"
      
  WebAppDatabase:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - SubnetGroup
      - DBEC2SecurityGroup
    Properties:
      DBSubnetGroupName: !Ref "SubnetGroup"
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      VPCSecurityGroups:
        - !GetAtt DBEC2SecurityGroup.GroupId
      AllocatedStorage: "5"
      DBInstanceClass: db.t2.micro #db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      #MultiAZ: True
      Tags:
        - Key: Name
          Value: !Join ["-", [webapp-rds, !Ref EnvironmentType]]
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: WebAppSecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-db-security-group, !Ref EnvironmentType]]
      GroupDescription: Allow postgres inbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupName:
            Ref: ALBSecurityGroupBack
      Tags:
        - Key: Name
          Value: !Join ["-", [webapp-db-security-group, !Ref EnvironmentType]]
  
 
#======================= OUTPUTS ====================================
Outputs:
  
  VPC:
    Description: A reference to the created VPC
    Value: !Ref Vpc

  FrontendSubnets:
    Description: A list of the frontend private subnets
    Value: !Join [ ",", [ !Ref FrontendSubnet1, !Ref FrontendSubnet2 ]]

  BackendSubnets:
    Description: A list of the backend private subnets
    Value: !Join [ ",", [ !Ref BackendSubnet1, !Ref BackendSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet 
    Value: !Ref PublicSubnet1

  DatabaseSubnet:
    Description: A reference to the databases subnet 
    Value: !Ref DatabaseSubnet1
#========= ALB =============
  URLback:
    Description: URL of the website Back
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - ApplicationLoadBalancerBack
          - DNSName  
  URLfront:
    Description: URL of the website Front
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - ApplicationLoadBalancerFront
          - DNSName  
#============== S3 =================
  MainBucketName:
    Description: Name of the main bucket
    Value: !Ref MainBucket
  LogBucketName:
    Description: Name of the access log bucket
    Value: !Ref AccessLogBucket

#================== DB =================
  WebAppDatabaseEndpoint:
    Description: "Connection endpoint for the database"
    Value: !GetAtt WebAppDatabase.Endpoint.Address

  URL_DB:
    Description: URL of the Database
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WebAppDatabase
          - DNSName  

